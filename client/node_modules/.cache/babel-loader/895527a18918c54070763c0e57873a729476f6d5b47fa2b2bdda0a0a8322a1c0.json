{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport moment from \"moment\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../contexts/authContext\";\nimport { request } from \"../../utils/axios\";\nexport const useCreatePost = function () {\n  _s();\n  let parentId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  const queryClient = useQueryClient();\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const uploadPostImg = async file => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const res = await request.post('/upload/post/', formData);\n    return res.data;\n  };\n  const createPost = async data => {\n    const {\n      title,\n      description,\n      ingredients,\n      post_img\n    } = data;\n    const fileUrl = post_img && post_img[0] ? await uploadPostImg(post_img[0]) : '';\n    const postObj = {\n      user_id: currentUser.id,\n      parent_id: parentId,\n      title,\n      description,\n      ingredients: JSON.stringify(ingredients),\n      date: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n      file: fileUrl\n    };\n    return await request.post('/single/', postObj);\n  };\n  const createPostMutation = useMutation(data => createPost(data), {\n    onSuccess: () => {\n      queryClient.invalidateQueries(['homePosts']);\n      queryClient.invalidateQueries(['profilePosts']);\n      queryClient.invalidateQueries(['postComments']);\n    }\n  });\n  return {\n    createPost: data => createPostMutation.mutate(data)\n  };\n};\n_s(useCreatePost, \"qHh1ct7yMSg6JJNz3OB8ZlQ6unw=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useMutation","useQueryClient","moment","useContext","AuthContext","request","useCreatePost","parentId","queryClient","currentUser","uploadPostImg","file","formData","FormData","append","res","post","data","createPost","title","description","ingredients","post_img","fileUrl","postObj","user_id","id","parent_id","JSON","stringify","date","format","createPostMutation","onSuccess","invalidateQueries","mutate"],"sources":["C:/Users/mathe/OneDrive/Documentos/vsc/fwitter/client/src/containers/post/useCreatePost.js"],"sourcesContent":["import { useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport moment from \"moment\";\r\nimport { useContext } from \"react\";\r\nimport { AuthContext } from \"../../contexts/authContext\";\r\nimport { request } from \"../../utils/axios\";\r\n\r\nexport const useCreatePost = (parentId = '') => {\r\n    const queryClient = useQueryClient();\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    const uploadPostImg = async file => {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        const res = await request.post('/upload/post/', formData);\r\n        return res.data;\r\n    }\r\n\r\n    const createPost = async data => {\r\n        const { title, description, ingredients, post_img } = data;\r\n        const fileUrl = post_img && post_img[0] ? \r\n            await uploadPostImg(post_img[0]) : '';\r\n        const postObj = {\r\n            user_id: currentUser.id,\r\n            parent_id: parentId,\r\n            title,\r\n            description,\r\n            ingredients: JSON.stringify(ingredients),\r\n            date: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\r\n            file: fileUrl\r\n        }\r\n        return await request.post('/single/', postObj);\r\n    }\r\n\r\n    const createPostMutation = useMutation(\r\n        data => createPost(data), \r\n        {\r\n            onSuccess: () => {\r\n                queryClient.invalidateQueries(['homePosts']);\r\n                queryClient.invalidateQueries(['profilePosts']);\r\n                queryClient.invalidateQueries(['postComments'])\r\n            }\r\n    });\r\n\r\n    return { createPost: data => createPostMutation.mutate(data) }\r\n}"],"mappings":";AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,uBAAuB;AACnE,OAAOC,MAAM,MAAM,QAAQ;AAC3B,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,OAAO,QAAQ,mBAAmB;AAE3C,OAAO,MAAMC,aAAa,GAAG,YAAmB;EAAA;EAAA,IAAlBC,QAAQ,uEAAG,EAAE;EACvC,MAAMC,WAAW,GAAGP,cAAc,EAAE;EACpC,MAAM;IAAEQ;EAAY,CAAC,GAAGN,UAAU,CAACC,WAAW,CAAC;EAE/C,MAAMM,aAAa,GAAG,MAAMC,IAAI,IAAI;IAChC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,MAAMI,GAAG,GAAG,MAAMV,OAAO,CAACW,IAAI,CAAC,eAAe,EAAEJ,QAAQ,CAAC;IACzD,OAAOG,GAAG,CAACE,IAAI;EACnB,CAAC;EAED,MAAMC,UAAU,GAAG,MAAMD,IAAI,IAAI;IAC7B,MAAM;MAAEE,KAAK;MAAEC,WAAW;MAAEC,WAAW;MAAEC;IAAS,CAAC,GAAGL,IAAI;IAC1D,MAAMM,OAAO,GAAGD,QAAQ,IAAIA,QAAQ,CAAC,CAAC,CAAC,GACnC,MAAMZ,aAAa,CAACY,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;IACzC,MAAME,OAAO,GAAG;MACZC,OAAO,EAAEhB,WAAW,CAACiB,EAAE;MACvBC,SAAS,EAAEpB,QAAQ;MACnBY,KAAK;MACLC,WAAW;MACXC,WAAW,EAAEO,IAAI,CAACC,SAAS,CAACR,WAAW,CAAC;MACxCS,IAAI,EAAE5B,MAAM,EAAE,CAAC6B,MAAM,CAAC,qBAAqB,CAAC;MAC5CpB,IAAI,EAAEY;IACV,CAAC;IACD,OAAO,MAAMlB,OAAO,CAACW,IAAI,CAAC,UAAU,EAAEQ,OAAO,CAAC;EAClD,CAAC;EAED,MAAMQ,kBAAkB,GAAGhC,WAAW,CAClCiB,IAAI,IAAIC,UAAU,CAACD,IAAI,CAAC,EACxB;IACIgB,SAAS,EAAE,MAAM;MACbzB,WAAW,CAAC0B,iBAAiB,CAAC,CAAC,WAAW,CAAC,CAAC;MAC5C1B,WAAW,CAAC0B,iBAAiB,CAAC,CAAC,cAAc,CAAC,CAAC;MAC/C1B,WAAW,CAAC0B,iBAAiB,CAAC,CAAC,cAAc,CAAC,CAAC;IACnD;EACR,CAAC,CAAC;EAEF,OAAO;IAAEhB,UAAU,EAAED,IAAI,IAAIe,kBAAkB,CAACG,MAAM,CAAClB,IAAI;EAAE,CAAC;AAClE,CAAC;AAAA,GAtCYX,aAAa;EAAA,QACFL,cAAc,EA0BPD,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}