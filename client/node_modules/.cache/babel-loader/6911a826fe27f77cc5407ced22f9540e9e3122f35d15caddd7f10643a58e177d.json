{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\OneDrive\\\\Documentos\\\\vsc\\\\fwitter\\\\client\\\\src\\\\containers\\\\postPage.js\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"@tanstack/react-query\";\nimport moment from \"moment\";\nimport 'moment/locale/pt-br';\nimport { useState } from \"react\";\nimport { useLocation, useMatch } from \"react-router-dom\";\nimport { getComments, getPostById } from \"../services/postsService\";\nimport Post from \"./post/post\";\nimport WriteComment from \"./post/writeComment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostPage = () => {\n  _s();\n  const match = useMatch(\"/post/:id\");\n  const id = match.params.id;\n  const {\n    data: postObj,\n    isFetched: isFetchedPost\n  } = useQuery(['post', {\n    id\n  }], () => getPostById(id).then(post => ({\n    ...post,\n    ingredients: JSON.parse(post.ingredients),\n    date: moment(post.date).format('YYYY-MM-DD HH:mm:ss')\n  })));\n  const {\n    data: comments,\n    isFetched: isFetchedComments\n  } = useQuery(['postComments', {\n    post_id: id\n  }], () => getComments(postObj.id), {\n    enabled: isFetchedPost\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"border-b border-stone-700\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sticky top-0 border-b border-stone-700 pt-2 pb-4 pl-3 font-medium text-xl z-20 bg-stone-800\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Fweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), isFetchedPost && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Post, {\n        postObj: postObj\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(WriteComment, {\n        postObj: postObj\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(PostPage, \"CM3kkrGCDC/sIF0FZa0dxUKc6sg=\", false, function () {\n  return [useMatch, useQuery, useQuery];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["useQuery","moment","useState","useLocation","useMatch","getComments","getPostById","Post","WriteComment","PostPage","match","id","params","data","postObj","isFetched","isFetchedPost","then","post","ingredients","JSON","parse","date","format","comments","isFetchedComments","post_id","enabled"],"sources":["C:/Users/mathe/OneDrive/Documentos/vsc/fwitter/client/src/containers/postPage.js"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\";\r\nimport moment from \"moment\";\r\nimport 'moment/locale/pt-br';\r\nimport { useState } from \"react\";\r\nimport { useLocation, useMatch } from \"react-router-dom\";\r\nimport { getComments, getPostById } from \"../services/postsService\";\r\nimport Post from \"./post/post\";\r\nimport WriteComment from \"./post/writeComment\";\r\n\r\nconst PostPage = () => {\r\n    const match = useMatch(\"/post/:id\");\r\n    const id = match.params.id;\r\n\r\n    const { \r\n        data: postObj, \r\n        isFetched: isFetchedPost \r\n    } = useQuery(['post', { id }], () => \r\n        getPostById(id).then(post => ({\r\n                ...post, \r\n                ingredients: JSON.parse(post.ingredients),\r\n                date: moment(post.date).format('YYYY-MM-DD HH:mm:ss')\r\n            }\r\n        ))\r\n    )\r\n\r\n    const {\r\n        data: comments,\r\n        isFetched: isFetchedComments\r\n    } = useQuery(['postComments', { post_id: id }], () => \r\n        getComments(postObj.id),\r\n        {\r\n            enabled: isFetchedPost\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"border-b border-stone-700\"> \r\n            <div className='sticky top-0 border-b border-stone-700 pt-2 pb-4 pl-3 font-medium text-xl z-20 bg-stone-800'>\r\n                <p>Fweet</p>\r\n            </div> \r\n            {isFetchedPost && <>\r\n                    <Post postObj={postObj}/>\r\n                    <WriteComment postObj={postObj}/>\r\n                </>\r\n            } \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostPage;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAO,qBAAqB;AAC5B,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,EAAEC,QAAQ,QAAQ,kBAAkB;AACxD,SAASC,WAAW,EAAEC,WAAW,QAAQ,0BAA0B;AACnE,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,YAAY,MAAM,qBAAqB;AAAC;AAAA;AAE/C,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACnB,MAAMC,KAAK,GAAGN,QAAQ,CAAC,WAAW,CAAC;EACnC,MAAMO,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACD,EAAE;EAE1B,MAAM;IACFE,IAAI,EAAEC,OAAO;IACbC,SAAS,EAAEC;EACf,CAAC,GAAGhB,QAAQ,CAAC,CAAC,MAAM,EAAE;IAAEW;EAAG,CAAC,CAAC,EAAE,MAC3BL,WAAW,CAACK,EAAE,CAAC,CAACM,IAAI,CAACC,IAAI,KAAK;IACtB,GAAGA,IAAI;IACPC,WAAW,EAAEC,IAAI,CAACC,KAAK,CAACH,IAAI,CAACC,WAAW,CAAC;IACzCG,IAAI,EAAErB,MAAM,CAACiB,IAAI,CAACI,IAAI,CAAC,CAACC,MAAM,CAAC,qBAAqB;EACxD,CAAC,CACJ,CAAC,CACL;EAED,MAAM;IACFV,IAAI,EAAEW,QAAQ;IACdT,SAAS,EAAEU;EACf,CAAC,GAAGzB,QAAQ,CAAC,CAAC,cAAc,EAAE;IAAE0B,OAAO,EAAEf;EAAG,CAAC,CAAC,EAAE,MAC5CN,WAAW,CAACS,OAAO,CAACH,EAAE,CAAC,EACvB;IACIgB,OAAO,EAAEX;EACb,CAAC,CACJ;EAED,oBACI;IAAK,SAAS,EAAC,2BAA2B;IAAA,wBACtC;MAAK,SAAS,EAAC,6FAA6F;MAAA,uBACxG;QAAA,UAAG;MAAK;QAAA;QAAA;QAAA;MAAA;IAAI;MAAA;MAAA;MAAA;IAAA,QACV,EACLA,aAAa,iBAAI;MAAA,wBACV,QAAC,IAAI;QAAC,OAAO,EAAEF;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAE,eACzB,QAAC,YAAY;QAAC,OAAO,EAAEA;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA,gBAClC;EAAA;IAAA;IAAA;IAAA;EAAA,QAEL;AAEd,CAAC;AAAA,GAtCKL,QAAQ;EAAA,QACIL,QAAQ,EAMlBJ,QAAQ,EAYRA,QAAQ;AAAA;AAAA,KAnBVS,QAAQ;AAwCd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}