{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from \"@tanstack/react-query\";\nimport { request } from \"../../utils/axios\";\nimport { useGetPostByIdQuery } from \"./useGetPostByIdQuery\";\nexport const useGetThreadQuery = _ref => {\n  _s();\n  let {\n    id\n  } = _ref;\n  const getPost = id => request.get('/single', {\n    params: {\n      id\n    }\n  }).then(res => {\n    const post = res.data[0];\n    return {\n      ...post,\n      ingredients: JSON.parse(post.ingredients),\n      date: moment(post.date).format('YYYY-MM-DD HH:mm:ss')\n    };\n  });\n  const getPostThread = async id => {\n    const posts = [];\n    let post = await getPost(id);\n    while (post.parent_id) {\n      let post = getPost(post.parent_id);\n      posts.unshift(post);\n    }\n    return posts;\n  };\n  return useQuery(['postThread', {\n    id\n  }], () => getPostThread(id), {\n    enabled: !!id\n  });\n};\n_s(useGetThreadQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","request","useGetPostByIdQuery","useGetThreadQuery","id","getPost","get","params","then","res","post","data","ingredients","JSON","parse","date","moment","format","getPostThread","posts","parent_id","unshift","enabled"],"sources":["C:/Users/mathe/OneDrive/Documentos/vsc/fwitter/client/src/containers/post/useGetThreadQuery.js"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\";\r\nimport { request } from \"../../utils/axios\";\r\nimport { useGetPostByIdQuery } from \"./useGetPostByIdQuery\";\r\n\r\nexport const useGetThreadQuery = ({ id }) => {\r\n    const getPost = id => \r\n        request.get('/single', {\r\n            params: { id }\r\n            }).then(res => {\r\n                const post = res.data[0];\r\n                return {\r\n                    ...post, \r\n                    ingredients: JSON.parse(post.ingredients),\r\n                    date: moment(post.date).format('YYYY-MM-DD HH:mm:ss')\r\n                }\r\n            })\r\n\r\n    const getPostThread = async id => {\r\n        const posts = [];\r\n        let post = await getPost(id);\r\n        while(post.parent_id) {\r\n            let post = getPost(post.parent_id);\r\n            posts.unshift(post);\r\n        }\r\n        return posts;\r\n    }\r\n    \r\n    return useQuery(['postThread', { id }], () => \r\n        getPostThread(id), {\r\n            enabled: !!id\r\n        }); \r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,mBAAmB,QAAQ,uBAAuB;AAE3D,OAAO,MAAMC,iBAAiB,GAAG,QAAY;EAAA;EAAA,IAAX;IAAEC;EAAG,CAAC;EACpC,MAAMC,OAAO,GAAGD,EAAE,IACdH,OAAO,CAACK,GAAG,CAAC,SAAS,EAAE;IACnBC,MAAM,EAAE;MAAEH;IAAG;EACb,CAAC,CAAC,CAACI,IAAI,CAACC,GAAG,IAAI;IACX,MAAMC,IAAI,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC;IACxB,OAAO;MACH,GAAGD,IAAI;MACPE,WAAW,EAAEC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACE,WAAW,CAAC;MACzCG,IAAI,EAAEC,MAAM,CAACN,IAAI,CAACK,IAAI,CAAC,CAACE,MAAM,CAAC,qBAAqB;IACxD,CAAC;EACL,CAAC,CAAC;EAEV,MAAMC,aAAa,GAAG,MAAMd,EAAE,IAAI;IAC9B,MAAMe,KAAK,GAAG,EAAE;IAChB,IAAIT,IAAI,GAAG,MAAML,OAAO,CAACD,EAAE,CAAC;IAC5B,OAAMM,IAAI,CAACU,SAAS,EAAE;MAClB,IAAIV,IAAI,GAAGL,OAAO,CAACK,IAAI,CAACU,SAAS,CAAC;MAClCD,KAAK,CAACE,OAAO,CAACX,IAAI,CAAC;IACvB;IACA,OAAOS,KAAK;EAChB,CAAC;EAED,OAAOnB,QAAQ,CAAC,CAAC,YAAY,EAAE;IAAEI;EAAG,CAAC,CAAC,EAAE,MACpCc,aAAa,CAACd,EAAE,CAAC,EAAE;IACfkB,OAAO,EAAE,CAAC,CAAClB;EACf,CAAC,CAAC;AACV,CAAC;AAAA,GA3BYD,iBAAiB;EAAA,QAuBnBH,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}