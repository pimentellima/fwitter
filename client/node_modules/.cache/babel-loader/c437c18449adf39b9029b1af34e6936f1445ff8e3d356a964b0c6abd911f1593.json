{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\OneDrive\\\\Documentos\\\\vsc\\\\fwitter\\\\client\\\\src\\\\containers\\\\profilePage.js\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"@tanstack/react-query\";\nimport moment from \"moment\";\nimport { useLocation } from \"react-router-dom\";\nimport { getUserPostsById } from \"../services/postsService\";\nimport Post from \"./post/post\";\nimport { getUserByUsername } from \"../services/userService\";\nimport Profile from \"./profile/profile\";\nimport Feed from \"./feed\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProfilePage = () => {\n  _s();\n  const location = useLocation();\n  const username = location.pathname.slice(1);\n  const {\n    data: user,\n    isFetched: isFetchedUser\n  } = useQuery(['profileUser', {\n    username\n  }], () => getUserByUsername(username));\n  const {\n    data: posts,\n    isFetched: isFetchedPosts\n  } = useQuery(['profilePosts'], () => getUserPostsById(user.id).then(data => data.map(post => ({\n    ...post,\n    ingredients: JSON.parse(post.ingredients),\n    date: moment(post.date).format('YYYY-MM-DD HH:mm:ss')\n  }))), {\n    enabled: isFetchedUser\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isFetchedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sticky top-0 border-b border-stone-700 pt-2 pb-4 pl-3 font-medium text-xl z-20 bg-stone-800\",\n      children: user && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Profile, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), isFetchedPosts ? /*#__PURE__*/_jsxDEV(Feed, {\n      posts: posts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true);\n};\n_s(ProfilePage, \"EY82LQLyWyrn1VZPmZ57H+C8vZU=\", false, function () {\n  return [useLocation, useQuery, useQuery];\n});\n_c = ProfilePage;\nexport default ProfilePage;\nvar _c;\n$RefreshReg$(_c, \"ProfilePage\");","map":{"version":3,"names":["useQuery","moment","useLocation","getUserPostsById","Post","getUserByUsername","Profile","Feed","ProfilePage","location","username","pathname","slice","data","user","isFetched","isFetchedUser","posts","isFetchedPosts","id","then","map","post","ingredients","JSON","parse","date","format","enabled","name"],"sources":["C:/Users/mathe/OneDrive/Documentos/vsc/fwitter/client/src/containers/profilePage.js"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\";\r\nimport moment from \"moment\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { getUserPostsById } from \"../services/postsService\";\r\nimport Post from \"./post/post\";\r\nimport { getUserByUsername } from \"../services/userService\";\r\nimport Profile from \"./profile/profile\";\r\nimport Feed from \"./feed\";\r\n\r\nconst ProfilePage = () => {\r\n    const location = useLocation();\r\n    const username = location.pathname.slice(1);\r\n\r\n    const { \r\n        data: user, \r\n        isFetched: isFetchedUser \r\n    } = useQuery(['profileUser', { username }], () => \r\n    getUserByUsername(username));\r\n\r\n\r\n    const { \r\n        data: posts,  \r\n        isFetched: isFetchedPosts\r\n    } = useQuery(['profilePosts'], () => \r\n            getUserPostsById(user.id).then(data => \r\n                data.map(post => ({\r\n                    ...post, \r\n                    ingredients: JSON.parse(post.ingredients),\r\n                    date: moment(post.date).format('YYYY-MM-DD HH:mm:ss')\r\n                }))\r\n            ), \r\n        {\r\n            enabled: isFetchedUser\r\n        });\r\n    \r\n    return ( \r\n        <> \r\n            {isFetchedUser && \r\n                <div className='sticky top-0 border-b border-stone-700 pt-2 pb-4 pl-3 font-medium text-xl z-20 bg-stone-800'>\r\n                    {user && <p>{user.name}</p>}\r\n                </div> \r\n            }\r\n            <Profile/>            \r\n            {isFetchedPosts ?\r\n                <Feed posts={posts}/>\r\n                :\r\n                <></>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfilePage;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,OAAOC,MAAM,MAAM,QAAQ;AAC3B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAASC,iBAAiB,QAAQ,yBAAyB;AAC3D,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAOC,IAAI,MAAM,QAAQ;AAAC;AAAA;AAE1B,MAAMC,WAAW,GAAG,MAAM;EAAA;EACtB,MAAMC,QAAQ,GAAGP,WAAW,EAAE;EAC9B,MAAMQ,QAAQ,GAAGD,QAAQ,CAACE,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC;EAE3C,MAAM;IACFC,IAAI,EAAEC,IAAI;IACVC,SAAS,EAAEC;EACf,CAAC,GAAGhB,QAAQ,CAAC,CAAC,aAAa,EAAE;IAAEU;EAAS,CAAC,CAAC,EAAE,MAC5CL,iBAAiB,CAACK,QAAQ,CAAC,CAAC;EAG5B,MAAM;IACFG,IAAI,EAAEI,KAAK;IACXF,SAAS,EAAEG;EACf,CAAC,GAAGlB,QAAQ,CAAC,CAAC,cAAc,CAAC,EAAE,MACvBG,gBAAgB,CAACW,IAAI,CAACK,EAAE,CAAC,CAACC,IAAI,CAACP,IAAI,IAC/BA,IAAI,CAACQ,GAAG,CAACC,IAAI,KAAK;IACd,GAAGA,IAAI;IACPC,WAAW,EAAEC,IAAI,CAACC,KAAK,CAACH,IAAI,CAACC,WAAW,CAAC;IACzCG,IAAI,EAAEzB,MAAM,CAACqB,IAAI,CAACI,IAAI,CAAC,CAACC,MAAM,CAAC,qBAAqB;EACxD,CAAC,CAAC,CAAC,CACN,EACL;IACIC,OAAO,EAAEZ;EACb,CAAC,CAAC;EAEN,oBACI;IAAA,WACKA,aAAa,iBACV;MAAK,SAAS,EAAC,6FAA6F;MAAA,UACvGF,IAAI,iBAAI;QAAA,UAAIA,IAAI,CAACe;MAAI;QAAA;QAAA;QAAA;MAAA;IAAK;MAAA;MAAA;MAAA;IAAA,QACzB,eAEV,QAAC,OAAO;MAAA;MAAA;MAAA;IAAA,QAAE,EACTX,cAAc,gBACX,QAAC,IAAI;MAAC,KAAK,EAAED;IAAM;MAAA;MAAA;MAAA;IAAA,QAAE,gBAErB,qCAAK;EAAA,gBAEV;AAEX,CAAC;AAAA,GAzCKT,WAAW;EAAA,QACIN,WAAW,EAMxBF,QAAQ,EAORA,QAAQ;AAAA;AAAA,KAdVQ,WAAW;AA4CjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}