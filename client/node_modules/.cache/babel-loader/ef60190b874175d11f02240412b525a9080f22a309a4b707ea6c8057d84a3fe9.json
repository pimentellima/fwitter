{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { request } from \"../../utils/axios\";\nexport const useQueryPosts = postObj => {\n  _s();\n  const queryClient = useQueryClient();\n  const {\n    id,\n    user_id,\n    parent_id,\n    share_user_id\n  } = postObj;\n  const {\n    data: postUser,\n    isFetched: isFetchedPostUser\n  } = useQuery(['postUser', {\n    id\n  }], () => request.get('/user', {\n    params: {\n      id: user_id\n    }\n  }).then(res => res.data[0]));\n  const {\n    data: shareUser,\n    isFetched: isFetchedShare\n  } = useQuery(['postShareUser', {\n    id\n  }], () => request.get('/user', {\n    params: {\n      id: share_user_id\n    }\n  }).then(res => res.data[0]), {\n    enabled: !!share_user_id\n  });\n  const {\n    data: parentUser,\n    isFetched: isFetchedParentUser\n  } = useQuery(['postParentUser', {\n    id\n  }], () => request.get('/posts/', {\n    params: {\n      id: parent_id\n    }\n  }).then(post => request.get('/user', {\n    params: {\n      id: post.user_id\n    }\n  }).then(res => res.data[0]), {\n    enabled: !!parent_id\n  }));\n  const deleteMutation = useMutation(() => deletePost(id), {\n    onSuccess: () => {\n      queryClient.invalidateQueries(['posts']);\n      queryClient.invalidateQueries(['profilePosts']);\n      queryClient.invalidateQueries(['postComments', {\n        parent_id\n      }]);\n    }\n  });\n  const isFetched = isFetchedParentUser && isFetchedPostUser && isFetchedShare;\n  return {\n    postUser,\n    shareUser,\n    parentUser,\n    isFetched,\n    delete: deleteMutation.mutate()\n  };\n};\n_s(useQueryPosts, \"Q3IsoXJsYVA3A78J+peRHL1Cpho=\", true, function () {\n  return [useQueryClient, useQuery, useQuery, useQuery];\n});","map":{"version":3,"names":["useQuery","useQueryClient","request","useQueryPosts","postObj","queryClient","id","user_id","parent_id","share_user_id","data","postUser","isFetched","isFetchedPostUser","get","params","then","res","shareUser","isFetchedShare","enabled","parentUser","isFetchedParentUser","post","deleteMutation","useMutation","deletePost","onSuccess","invalidateQueries","delete","mutate"],"sources":["C:/Users/mathe/OneDrive/Documentos/vsc/fwitter/client/src/containers/post/useQueryPosts.js"],"sourcesContent":["import { useQuery, useQueryClient } from \"@tanstack/react-query\";\r\nimport { request } from \"../../utils/axios\";\r\n\r\nexport const useQueryPosts = (postObj) => {\r\n    const queryClient = useQueryClient();\r\n\r\n    const {\r\n        id,\r\n        user_id,\r\n        parent_id,\r\n        share_user_id    \r\n    } = postObj;\r\n\r\n    const { data: postUser, isFetched: isFetchedPostUser } = useQuery(\r\n        ['postUser', { id }], () => \r\n            request.get('/user', {\r\n                params:{ id: user_id }\r\n            }).then(res => res.data[0])\r\n    );\r\n\r\n    const { data: shareUser, isFetched: isFetchedShare } = useQuery(\r\n    ['postShareUser', { id }], () => \r\n            request.get('/user', {\r\n                params:{ id: share_user_id }\r\n            }).then(res => res.data[0]) ,{\r\n                enabled: !!share_user_id\r\n            }\r\n    );\r\n\r\n    const { data: parentUser, isFetched: isFetchedParentUser} = useQuery(\r\n        ['postParentUser', { id }], () => \r\n        request.get('/posts/', {\r\n            params: { id: parent_id }\r\n        }).then(post => \r\n            request.get('/user', {\r\n                params: { id: post.user_id }\r\n            }).then(res => res.data[0]), \r\n        {\r\n            enabled: !!parent_id\r\n        }\r\n    ))\r\n\r\n    const deleteMutation = useMutation(\r\n        () => deletePost(id), {\r\n            onSuccess: () => {\r\n                queryClient.invalidateQueries(['posts']);\r\n                queryClient.invalidateQueries(['profilePosts']);\r\n                queryClient.invalidateQueries(['postComments', { parent_id }]);\r\n            }\r\n        }\r\n    )\r\n\r\n    const isFetched = isFetchedParentUser && isFetchedPostUser && isFetchedShare\r\n\r\n    return { \r\n        postUser, \r\n        shareUser, \r\n        parentUser, \r\n        isFetched,\r\n        delete: deleteMutation.mutate() \r\n    }\r\n\r\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,cAAc,QAAQ,uBAAuB;AAChE,SAASC,OAAO,QAAQ,mBAAmB;AAE3C,OAAO,MAAMC,aAAa,GAAIC,OAAO,IAAK;EAAA;EACtC,MAAMC,WAAW,GAAGJ,cAAc,EAAE;EAEpC,MAAM;IACFK,EAAE;IACFC,OAAO;IACPC,SAAS;IACTC;EACJ,CAAC,GAAGL,OAAO;EAEX,MAAM;IAAEM,IAAI,EAAEC,QAAQ;IAAEC,SAAS,EAAEC;EAAkB,CAAC,GAAGb,QAAQ,CAC7D,CAAC,UAAU,EAAE;IAAEM;EAAG,CAAC,CAAC,EAAE,MAClBJ,OAAO,CAACY,GAAG,CAAC,OAAO,EAAE;IACjBC,MAAM,EAAC;MAAET,EAAE,EAAEC;IAAQ;EACzB,CAAC,CAAC,CAACS,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC,CAClC;EAED,MAAM;IAAEA,IAAI,EAAEQ,SAAS;IAAEN,SAAS,EAAEO;EAAe,CAAC,GAAGnB,QAAQ,CAC/D,CAAC,eAAe,EAAE;IAAEM;EAAG,CAAC,CAAC,EAAE,MACnBJ,OAAO,CAACY,GAAG,CAAC,OAAO,EAAE;IACjBC,MAAM,EAAC;MAAET,EAAE,EAAEG;IAAc;EAC/B,CAAC,CAAC,CAACO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;IACzBU,OAAO,EAAE,CAAC,CAACX;EACf,CAAC,CACR;EAED,MAAM;IAAEC,IAAI,EAAEW,UAAU;IAAET,SAAS,EAAEU;EAAmB,CAAC,GAAGtB,QAAQ,CAChE,CAAC,gBAAgB,EAAE;IAAEM;EAAG,CAAC,CAAC,EAAE,MAC5BJ,OAAO,CAACY,GAAG,CAAC,SAAS,EAAE;IACnBC,MAAM,EAAE;MAAET,EAAE,EAAEE;IAAU;EAC5B,CAAC,CAAC,CAACQ,IAAI,CAACO,IAAI,IACRrB,OAAO,CAACY,GAAG,CAAC,OAAO,EAAE;IACjBC,MAAM,EAAE;MAAET,EAAE,EAAEiB,IAAI,CAAChB;IAAQ;EAC/B,CAAC,CAAC,CAACS,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC,EAC/B;IACIU,OAAO,EAAE,CAAC,CAACZ;EACf,CAAC,CACJ,CAAC;EAEF,MAAMgB,cAAc,GAAGC,WAAW,CAC9B,MAAMC,UAAU,CAACpB,EAAE,CAAC,EAAE;IAClBqB,SAAS,EAAE,MAAM;MACbtB,WAAW,CAACuB,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC;MACxCvB,WAAW,CAACuB,iBAAiB,CAAC,CAAC,cAAc,CAAC,CAAC;MAC/CvB,WAAW,CAACuB,iBAAiB,CAAC,CAAC,cAAc,EAAE;QAAEpB;MAAU,CAAC,CAAC,CAAC;IAClE;EACJ,CAAC,CACJ;EAED,MAAMI,SAAS,GAAGU,mBAAmB,IAAIT,iBAAiB,IAAIM,cAAc;EAE5E,OAAO;IACHR,QAAQ;IACRO,SAAS;IACTG,UAAU;IACVT,SAAS;IACTiB,MAAM,EAAEL,cAAc,CAACM,MAAM;EACjC,CAAC;AAEL,CAAC;AAAA,GA3DY3B,aAAa;EAAA,QACFF,cAAc,EASuBD,QAAQ,EAOVA,QAAQ,EASHA,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}