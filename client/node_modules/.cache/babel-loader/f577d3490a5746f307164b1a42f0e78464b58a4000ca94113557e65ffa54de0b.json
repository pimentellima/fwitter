{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\OneDrive\\\\Documentos\\\\vsc\\\\fwitter\\\\client\\\\src\\\\containers\\\\post\\\\viewPost.js\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"@tanstack/react-query\";\nimport 'moment/locale/pt-br';\nimport { useContext, useEffect, useRef } from \"react\";\nimport { useMatch } from \"react-router-dom\";\nimport { AuthContext } from \"../../contexts/authContext\";\nimport { getComments, getPostById } from \"../../services/postsService\";\nimport { getPostThread } from '../../utils/getPostThread';\nimport Feed from '../feed';\nimport WriteComment from \"../write/writeComment\";\nimport Post from \"./post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewPost = () => {\n  _s();\n  const match = useMatch(\"/post/:id\");\n  const id = match.params.id;\n  const postRef = useRef(null);\n  const {\n    data: postThread,\n    isFetched: isFetchedThread\n  } = useQuery(['postThread', {\n    id\n  }], () => getPostThread(id));\n  const {\n    data: postObj,\n    isFetched: isFetchedPost\n  } = useQuery(['post', {\n    id\n  }], () => getPostById(id));\n  const {\n    data: comments,\n    isFetched: isFetchedComments\n  } = useQuery(['postComments', {\n    parent_id: postObj === null || postObj === void 0 ? void 0 : postObj.id\n  }], () => getComments(postObj.id), {\n    enabled: isFetchedPost\n  });\n  useEffect(() => {\n    if (isFetchedThread && isFetchedCommentsisFetchedPost) {\n      postRef.current.scrollIntoView();\n    }\n  }, [isFetchedThread, isFetchedComments, isFetchedPost]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sticky top-0 border-b border-stone-700 pt-2 pb-4 pl-3 font-medium text-xl z-20 bg-stone-800\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Fweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), isFetchedThread && /*#__PURE__*/_jsxDEV(Feed, {\n      posts: postThread\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 33\n    }, this), isFetchedPost && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"[&_>*]:border-b [&_>*]:border-stone-700\",\n      children: [/*#__PURE__*/_jsxDEV(Post, {\n        postRef: postRef,\n        postObj: postObj\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(WriteComment, {\n        parent_id: postObj.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 31\n    }, this), isFetchedComments && /*#__PURE__*/_jsxDEV(Feed, {\n      posts: comments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(ViewPost, \"QmSAOI1ZJCEva7AOpw0iFenzBc8=\", false, function () {\n  return [useMatch, useQuery, useQuery, useQuery];\n});\n_c = ViewPost;\nexport default ViewPost;\nvar _c;\n$RefreshReg$(_c, \"ViewPost\");","map":{"version":3,"names":["useQuery","useContext","useEffect","useRef","useMatch","AuthContext","getComments","getPostById","getPostThread","Feed","WriteComment","Post","ViewPost","match","id","params","postRef","data","postThread","isFetched","isFetchedThread","postObj","isFetchedPost","comments","isFetchedComments","parent_id","enabled","isFetchedCommentsisFetchedPost","current","scrollIntoView"],"sources":["C:/Users/mathe/OneDrive/Documentos/vsc/fwitter/client/src/containers/post/viewPost.js"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\";\r\nimport 'moment/locale/pt-br';\r\nimport { useContext, useEffect, useRef } from \"react\";\r\nimport { useMatch } from \"react-router-dom\";\r\nimport { AuthContext } from \"../../contexts/authContext\";\r\nimport { getComments, getPostById } from \"../../services/postsService\";\r\nimport { getPostThread } from '../../utils/getPostThread';\r\nimport Feed from '../feed';\r\nimport WriteComment from \"../write/writeComment\";\r\nimport Post from \"./post\";\r\n\r\nconst ViewPost = () => {\r\n    const match = useMatch(\"/post/:id\");\r\n    const id = match.params.id;\r\n    const postRef = useRef(null);\r\n\r\n    const {\r\n        data: postThread,\r\n        isFetched: isFetchedThread\r\n    } = useQuery(['postThread', { id }], () => getPostThread(id));\r\n\r\n    const { \r\n        data: postObj, \r\n        isFetched: isFetchedPost \r\n    } = useQuery(['post', { id }], () => \r\n        getPostById(id)\r\n    )\r\n\r\n    const {\r\n        data: comments,\r\n        isFetched: isFetchedComments\r\n    } = useQuery(['postComments', { parent_id: postObj?.id }], () => \r\n        getComments(postObj.id),\r\n        {\r\n            enabled: isFetchedPost\r\n        }\r\n    )\r\n\r\n    useEffect(() => {\r\n        if(isFetchedThread && isFetchedCommentsisFetchedPost) {\r\n            postRef.current.scrollIntoView();\r\n        }\r\n    }, [isFetchedThread, isFetchedComments, isFetchedPost])\r\n\r\n    return (\r\n        <div> \r\n            <div className='sticky top-0 border-b border-stone-700 pt-2 pb-4 pl-3 font-medium text-xl z-20 bg-stone-800'>\r\n                <p>Fweet</p>\r\n            </div> \r\n            {isFetchedThread && <Feed posts={postThread}/>}\r\n            {isFetchedPost && <div className=\"[&_>*]:border-b [&_>*]:border-stone-700\">\r\n                    <Post postRef={postRef} postObj={postObj}/>\r\n                    <WriteComment parent_id={postObj.id}/>\r\n            </div>}\r\n            {isFetchedComments && <Feed posts={comments}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewPost;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,OAAO,qBAAqB;AAC5B,SAASC,UAAU,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACrD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,WAAW,EAAEC,WAAW,QAAQ,6BAA6B;AACtE,SAASC,aAAa,QAAQ,2BAA2B;AACzD,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,IAAI,MAAM,QAAQ;AAAC;AAE1B,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACnB,MAAMC,KAAK,GAAGT,QAAQ,CAAC,WAAW,CAAC;EACnC,MAAMU,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACD,EAAE;EAC1B,MAAME,OAAO,GAAGb,MAAM,CAAC,IAAI,CAAC;EAE5B,MAAM;IACFc,IAAI,EAAEC,UAAU;IAChBC,SAAS,EAAEC;EACf,CAAC,GAAGpB,QAAQ,CAAC,CAAC,YAAY,EAAE;IAAEc;EAAG,CAAC,CAAC,EAAE,MAAMN,aAAa,CAACM,EAAE,CAAC,CAAC;EAE7D,MAAM;IACFG,IAAI,EAAEI,OAAO;IACbF,SAAS,EAAEG;EACf,CAAC,GAAGtB,QAAQ,CAAC,CAAC,MAAM,EAAE;IAAEc;EAAG,CAAC,CAAC,EAAE,MAC3BP,WAAW,CAACO,EAAE,CAAC,CAClB;EAED,MAAM;IACFG,IAAI,EAAEM,QAAQ;IACdJ,SAAS,EAAEK;EACf,CAAC,GAAGxB,QAAQ,CAAC,CAAC,cAAc,EAAE;IAAEyB,SAAS,EAAEJ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEP;EAAG,CAAC,CAAC,EAAE,MACvDR,WAAW,CAACe,OAAO,CAACP,EAAE,CAAC,EACvB;IACIY,OAAO,EAAEJ;EACb,CAAC,CACJ;EAEDpB,SAAS,CAAC,MAAM;IACZ,IAAGkB,eAAe,IAAIO,8BAA8B,EAAE;MAClDX,OAAO,CAACY,OAAO,CAACC,cAAc,EAAE;IACpC;EACJ,CAAC,EAAE,CAACT,eAAe,EAAEI,iBAAiB,EAAEF,aAAa,CAAC,CAAC;EAEvD,oBACI;IAAA,wBACI;MAAK,SAAS,EAAC,6FAA6F;MAAA,uBACxG;QAAA,UAAG;MAAK;QAAA;QAAA;QAAA;MAAA;IAAI;MAAA;MAAA;MAAA;IAAA,QACV,EACLF,eAAe,iBAAI,QAAC,IAAI;MAAC,KAAK,EAAEF;IAAW;MAAA;MAAA;MAAA;IAAA,QAAE,EAC7CI,aAAa,iBAAI;MAAK,SAAS,EAAC,yCAAyC;MAAA,wBAClE,QAAC,IAAI;QAAC,OAAO,EAAEN,OAAQ;QAAC,OAAO,EAAEK;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAE,eAC3C,QAAC,YAAY;QAAC,SAAS,EAAEA,OAAO,CAACP;MAAG;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QACxC,EACLU,iBAAiB,iBAAI,QAAC,IAAI;MAAC,KAAK,EAAED;IAAS;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAC5C;AAEd,CAAC;AAAA,GA9CKX,QAAQ;EAAA,QACIR,QAAQ,EAOlBJ,QAAQ,EAKRA,QAAQ,EAORA,QAAQ;AAAA;AAAA,KApBVY,QAAQ;AAgDd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}